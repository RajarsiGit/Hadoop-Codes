/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class my_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"my_record\",\"fields\":[{\"name\":\"athelete\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"year\",\"type\":\"string\"},{\"name\":\"closing\",\"type\":\"string\"},{\"name\":\"sport\",\"type\":\"string\"},{\"name\":\"gold\",\"type\":\"int\"},{\"name\":\"silver\",\"type\":\"int\"},{\"name\":\"bronze\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence athelete;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence year;
  @Deprecated public java.lang.CharSequence closing;
  @Deprecated public java.lang.CharSequence sport;
  @Deprecated public int gold;
  @Deprecated public int silver;
  @Deprecated public int bronze;
  @Deprecated public int total;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public my_record() {}

  /**
   * All-args constructor.
   */
  public my_record(java.lang.CharSequence athelete, java.lang.Integer age, java.lang.CharSequence country, java.lang.CharSequence year, java.lang.CharSequence closing, java.lang.CharSequence sport, java.lang.Integer gold, java.lang.Integer silver, java.lang.Integer bronze, java.lang.Integer total) {
    this.athelete = athelete;
    this.age = age;
    this.country = country;
    this.year = year;
    this.closing = closing;
    this.sport = sport;
    this.gold = gold;
    this.silver = silver;
    this.bronze = bronze;
    this.total = total;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return athelete;
    case 1: return age;
    case 2: return country;
    case 3: return year;
    case 4: return closing;
    case 5: return sport;
    case 6: return gold;
    case 7: return silver;
    case 8: return bronze;
    case 9: return total;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: athelete = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: country = (java.lang.CharSequence)value$; break;
    case 3: year = (java.lang.CharSequence)value$; break;
    case 4: closing = (java.lang.CharSequence)value$; break;
    case 5: sport = (java.lang.CharSequence)value$; break;
    case 6: gold = (java.lang.Integer)value$; break;
    case 7: silver = (java.lang.Integer)value$; break;
    case 8: bronze = (java.lang.Integer)value$; break;
    case 9: total = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'athelete' field.
   */
  public java.lang.CharSequence getAthelete() {
    return athelete;
  }

  /**
   * Sets the value of the 'athelete' field.
   * @param value the value to set.
   */
  public void setAthelete(java.lang.CharSequence value) {
    this.athelete = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.CharSequence getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.CharSequence value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'closing' field.
   */
  public java.lang.CharSequence getClosing() {
    return closing;
  }

  /**
   * Sets the value of the 'closing' field.
   * @param value the value to set.
   */
  public void setClosing(java.lang.CharSequence value) {
    this.closing = value;
  }

  /**
   * Gets the value of the 'sport' field.
   */
  public java.lang.CharSequence getSport() {
    return sport;
  }

  /**
   * Sets the value of the 'sport' field.
   * @param value the value to set.
   */
  public void setSport(java.lang.CharSequence value) {
    this.sport = value;
  }

  /**
   * Gets the value of the 'gold' field.
   */
  public java.lang.Integer getGold() {
    return gold;
  }

  /**
   * Sets the value of the 'gold' field.
   * @param value the value to set.
   */
  public void setGold(java.lang.Integer value) {
    this.gold = value;
  }

  /**
   * Gets the value of the 'silver' field.
   */
  public java.lang.Integer getSilver() {
    return silver;
  }

  /**
   * Sets the value of the 'silver' field.
   * @param value the value to set.
   */
  public void setSilver(java.lang.Integer value) {
    this.silver = value;
  }

  /**
   * Gets the value of the 'bronze' field.
   */
  public java.lang.Integer getBronze() {
    return bronze;
  }

  /**
   * Sets the value of the 'bronze' field.
   * @param value the value to set.
   */
  public void setBronze(java.lang.Integer value) {
    this.bronze = value;
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Integer getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Integer value) {
    this.total = value;
  }

  /** Creates a new my_record RecordBuilder */
  public static my_record.Builder newBuilder() {
    return new my_record.Builder();
  }
  
  /** Creates a new my_record RecordBuilder by copying an existing Builder */
  public static my_record.Builder newBuilder(my_record.Builder other) {
    return new my_record.Builder(other);
  }
  
  /** Creates a new my_record RecordBuilder by copying an existing my_record instance */
  public static my_record.Builder newBuilder(my_record other) {
    return new my_record.Builder(other);
  }
  
  /**
   * RecordBuilder for my_record instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<my_record>
    implements org.apache.avro.data.RecordBuilder<my_record> {

    private java.lang.CharSequence athelete;
    private int age;
    private java.lang.CharSequence country;
    private java.lang.CharSequence year;
    private java.lang.CharSequence closing;
    private java.lang.CharSequence sport;
    private int gold;
    private int silver;
    private int bronze;
    private int total;

    /** Creates a new Builder */
    private Builder() {
      super(my_record.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(my_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.athelete)) {
        this.athelete = data().deepCopy(fields()[0].schema(), other.athelete);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.year)) {
        this.year = data().deepCopy(fields()[3].schema(), other.year);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.closing)) {
        this.closing = data().deepCopy(fields()[4].schema(), other.closing);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sport)) {
        this.sport = data().deepCopy(fields()[5].schema(), other.sport);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gold)) {
        this.gold = data().deepCopy(fields()[6].schema(), other.gold);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.silver)) {
        this.silver = data().deepCopy(fields()[7].schema(), other.silver);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bronze)) {
        this.bronze = data().deepCopy(fields()[8].schema(), other.bronze);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.total)) {
        this.total = data().deepCopy(fields()[9].schema(), other.total);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing my_record instance */
    private Builder(my_record other) {
            super(my_record.SCHEMA$);
      if (isValidValue(fields()[0], other.athelete)) {
        this.athelete = data().deepCopy(fields()[0].schema(), other.athelete);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.year)) {
        this.year = data().deepCopy(fields()[3].schema(), other.year);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.closing)) {
        this.closing = data().deepCopy(fields()[4].schema(), other.closing);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sport)) {
        this.sport = data().deepCopy(fields()[5].schema(), other.sport);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gold)) {
        this.gold = data().deepCopy(fields()[6].schema(), other.gold);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.silver)) {
        this.silver = data().deepCopy(fields()[7].schema(), other.silver);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bronze)) {
        this.bronze = data().deepCopy(fields()[8].schema(), other.bronze);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.total)) {
        this.total = data().deepCopy(fields()[9].schema(), other.total);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'athelete' field */
    public java.lang.CharSequence getAthelete() {
      return athelete;
    }
    
    /** Sets the value of the 'athelete' field */
    public my_record.Builder setAthelete(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.athelete = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'athelete' field has been set */
    public boolean hasAthelete() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'athelete' field */
    public my_record.Builder clearAthelete() {
      athelete = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'age' field */
    public java.lang.Integer getAge() {
      return age;
    }
    
    /** Sets the value of the 'age' field */
    public my_record.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'age' field has been set */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'age' field */
    public my_record.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.CharSequence getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public my_record.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'country' field */
    public my_record.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'year' field */
    public java.lang.CharSequence getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public my_record.Builder setYear(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.year = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'year' field */
    public my_record.Builder clearYear() {
      year = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'closing' field */
    public java.lang.CharSequence getClosing() {
      return closing;
    }
    
    /** Sets the value of the 'closing' field */
    public my_record.Builder setClosing(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.closing = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'closing' field has been set */
    public boolean hasClosing() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'closing' field */
    public my_record.Builder clearClosing() {
      closing = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'sport' field */
    public java.lang.CharSequence getSport() {
      return sport;
    }
    
    /** Sets the value of the 'sport' field */
    public my_record.Builder setSport(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.sport = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'sport' field has been set */
    public boolean hasSport() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'sport' field */
    public my_record.Builder clearSport() {
      sport = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'gold' field */
    public java.lang.Integer getGold() {
      return gold;
    }
    
    /** Sets the value of the 'gold' field */
    public my_record.Builder setGold(int value) {
      validate(fields()[6], value);
      this.gold = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'gold' field has been set */
    public boolean hasGold() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'gold' field */
    public my_record.Builder clearGold() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'silver' field */
    public java.lang.Integer getSilver() {
      return silver;
    }
    
    /** Sets the value of the 'silver' field */
    public my_record.Builder setSilver(int value) {
      validate(fields()[7], value);
      this.silver = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'silver' field has been set */
    public boolean hasSilver() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'silver' field */
    public my_record.Builder clearSilver() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'bronze' field */
    public java.lang.Integer getBronze() {
      return bronze;
    }
    
    /** Sets the value of the 'bronze' field */
    public my_record.Builder setBronze(int value) {
      validate(fields()[8], value);
      this.bronze = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'bronze' field has been set */
    public boolean hasBronze() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'bronze' field */
    public my_record.Builder clearBronze() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'total' field */
    public java.lang.Integer getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public my_record.Builder setTotal(int value) {
      validate(fields()[9], value);
      this.total = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'total' field */
    public my_record.Builder clearTotal() {
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public my_record build() {
      try {
        my_record record = new my_record();
        record.athelete = fieldSetFlags()[0] ? this.athelete : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.year = fieldSetFlags()[3] ? this.year : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.closing = fieldSetFlags()[4] ? this.closing : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.sport = fieldSetFlags()[5] ? this.sport : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.gold = fieldSetFlags()[6] ? this.gold : (java.lang.Integer) defaultValue(fields()[6]);
        record.silver = fieldSetFlags()[7] ? this.silver : (java.lang.Integer) defaultValue(fields()[7]);
        record.bronze = fieldSetFlags()[8] ? this.bronze : (java.lang.Integer) defaultValue(fields()[8]);
        record.total = fieldSetFlags()[9] ? this.total : (java.lang.Integer) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
